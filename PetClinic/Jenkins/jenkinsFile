
node {
 try  {
 notify('Job Started') 
     
  stage('Git-Checkout') {
   git 'https://github.com/imbhascker13/PetClinic.git'
  }
    
 def project_path="PetClinic/Code/petclinic"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
  stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
  stage('Sonar Analysis') {
   withSonarQubeEnv('sonarqube') {
        sh "mvn sonar:sonar"
    }
  }
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
   stage('Jfrog Artifacory'){
    script{
        def server= Artifactory.server 'Artifactory'
            def uploadSpec= """{
                "files": [{
                "pattern": "/root/.jenkins/workspace/PetClinicProjectnew_QA/PetClinic/Code/petclinic/target/petclinic.war",
                "target": "petclinic"}]
            }"""
        server.upload(uploadSpec)
     }
    }
  
   stage('Docker-Stage-Deployment') {
   sh label: '', script: 'docker-compose up -d --build'
  } 
   
 }


notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}

def notify(status){
    emailext (
	to: "NiharSibu@gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
